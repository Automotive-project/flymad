#!/usr/bin/env python
import serial
import numpy as np
import threading
import time
import collections

import roslib; roslib.load_manifest('flymad')
import rospy
from std_msgs.msg import UInt8, UInt16, String, Float32, Bool
from flymad.msg import MicroVelocity, MicroPosition, LaserConfiguration
from flymad.util import myint16, dac_value_wrap

N_LASERS = 3

class FlyMADMicro(object):
    def __init__(self):
        rospy.init_node('flymad_micro')

        self._laser_pubs = []
        self._laser_sense_r = []
        for i in range(N_LASERS):
            self._laser_pubs.append(
                rospy.Publisher('~laser%d/current' % i, Float32)
            )
            self._laser_sense_r.append(
                rospy.get_param('~laser%d/sense_resistor' % i, default=1.0)
            )

        self._pub_dac_position = rospy.Publisher('~position_echo',
                                                MicroPosition,
                                                tcp_nodelay=True)

        self._send_timezone()

        port = rospy.get_param( '~port', default = '/dev/ttyUSB0' )
        try:
            self.ser = serial.Serial(port=port,
                                     timeout=0.1,
                                     baudrate=115200)
            self.ser.open()
            rospy.loginfo('opened serial port: %s'%port)
        except serial.serialutil.SerialException, err:
            rospy.logwarn('could not open serial port: %s'%(str(err),))
            self.ser = None

        self._buf = ''

        self._debug = int(rospy.get_param('~debug', 0))

        if self._debug:
            print 'debug mode on (%d)' % self._debug
            print '\t0 = disabled'
            print '\t1 = print sent commands'
            print '\t2 = print raw recieved commands'
        else:
            rospy.loginfo('debug mode disabled (set param debug > 0) to enable')

        self.lock = threading.Lock()
        with self.lock:
            self._last_pos = {k:0 for k in 'AB'}
            self._last_vel = {k:0 for k in 'AB'}
            self._last_vel_time = rospy.get_time()
            self._last_laser = 0

        rospy.Timer( rospy.Duration(1.0/100.0), self.on_timer )

        _ = rospy.Subscriber('~position', MicroPosition, self._position_callback)
        _ = rospy.Subscriber('~velocity', MicroVelocity, self._velocity_callback)
        for i in range(N_LASERS):
            rospy.Subscriber('~laser%d/configuration' % i, LaserConfiguration, self._laser_configuration_callback, i)

        self._initialized = False
        self._pub_init = rospy.Publisher('~initialized', Bool, latch=True)

    def _send_timezone(self):
        pub_timezone = rospy.Publisher('/timezone',
                                       String,
                                       latch=True)
        msg = String()
        msg.data = time.tzname[0]
        pub_timezone.publish(msg)

    def _laser_configuration_callback(self,msg,i):
        with self.lock:
            serstr = 'L=%d %d %.2f %d\n' % (i,msg.enable,msg.frequency,int(msg.intensity*255.0))
            self._write_serial(serstr)

    def _position_callback(self,msg):
        if self._initialized:
            with self.lock:
                self._update(msg.laser, posA=msg.posA, posB=msg.posB)

    def _velocity_callback(self,msg):
        if self._initialized:
            with self.lock:
                self._update(msg.laser, velA=msg.velA, velB=msg.velB)

    def _write_serial(self, serstr):
        if self._debug:
            print "tx : '%s'" % serstr[:-1]
        if self.ser is not None:
            self.ser.write(serstr)

    def _update(self,laser,posA=None,posB=None,velA=None,velB=None):

        argA = 0
        argB = 0
        argC = laser

        if velA is not None or velB is not None:
            argA = velA
            argB = velB

            self._last_vel['A'] = velA
            self._last_vel['B'] = velB
            self._last_vel_time = rospy.get_time()

            serstr = 'V=%d %d %d\n' % (argA, argB, argC)

        if posA is not None or posB is not None:
            if dac_value_wrap(posA) != posA:
                raise ValueError("position A value (%d) too large"%posA)
            if dac_value_wrap(posB) != posB:
                raise ValueError("position B value (%d) too large"%posB)
            argA = posA
            argB = posB

            self._last_pos['A'] = posA
            self._last_pos['B'] = posB
            self._last_vel['A'] = 0
            self._last_vel['B'] = 0
            self._last_vel_time = rospy.get_time()

            serstr = 'P=%d %d %d\n' % (argA, argB, argC)

        self._write_serial(serstr)

    def on_timer(self, event):
        with self.lock:
            # publish best guess of DAC positions
            now = rospy.get_time()
            dt = now-self._last_vel_time

            a = self._last_pos['A'] + self._last_vel['A']*dt
            b = self._last_pos['B'] + self._last_vel['B']*dt

            a = dac_value_wrap(a)
            b = dac_value_wrap(b)
            self._last_pos['A'] = a
            self._last_pos['B'] = b
            self._last_vel_time = now

            laser = self._last_laser

        msg = MicroPosition()
        msg.posA = a
        msg.posB = b
        msg.laser = laser
        self._pub_dac_position.publish(msg)

    def run(self):
        parsers = {"S=":self._parse_s,
                   "v=":self._parse_v}

        self._pub_init.publish(False)

        while not rospy.is_shutdown():
            if self.ser is not None:
                self._read_serial(parsers)

    def _parse_s(self,line):
        try:
            dacA, dacB, l0, l1, l2 = map(int,line[2:].split())
        except:
            rospy.logwarn('invalid state packet: %r' % line)
            return

        dacA = dac_value_wrap(dacA)
        dacB = dac_value_wrap(dacB)
        with self.lock:
            self._last_pos['A'] = dacA
            self._last_pos['B'] = dacB
            self._last_vel_time = rospy.get_time()

        for pub,sense_r,raw in zip(self._laser_pubs, self._laser_sense_r, (l0,l1,l2)):
                  #10 bit      #internal aref = 1.1
            cur = (raw/1024.0) * 1.1 / 50.0 / sense_r
            pub.publish(cur)

    def _parse_v(self,line):
        if line.strip() == 'v=2':
            self._initialized = True
            self._pub_init.publish(True)
        else:
            rospy.logwarn('incompatible version: %r' % line)

    def _read_serial(self,parsers):
        buf = self.ser.read()
        if len(buf):
            self._buf += buf
            lines = self._buf.split('\r\n')
            self._buf = lines.pop() # returns '' when last chars were \r\n
            for line in lines:
                if self._debug > 1:
                    print 'rx :',repr(line)

                if len(line) >= 2:
                    if not self._initialized:
                        with self.lock:
                            #turn off the lasers at process start
                            self._write_serial("P=0 0 0\n")
                            #version request
                            self._write_serial("v?\n")

                    try:
                        parsers[line[:2]](line)
                    except KeyError:
                        rospy.logwarn('unknown comm packet: %r' % line)

if __name__=='__main__':
    flymad_micro=FlyMADMicro()
    flymad_micro.run()
