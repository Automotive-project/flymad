#!/usr/bin/env python
import roslib; roslib.load_manifest('flymad')
import rospy

from flymad.msg import Raw2dPositions, TrackedObj
from geometry_msgs.msg import Pose2D
from std_msgs.msg import UInt8

import numpy as np
import adskalman.adskalman as adskalman
from flymad.constants import FPS

FPS = 30
MAX_DIST_PIXELS = 20.0
MAX_P2 = 50
Qsigma=10.0 # process covariance
Rsigma=10.0 # observation covariance

max_dist_squared = MAX_DIST_PIXELS**2

def make_new_object(xy_theta):
    x,y,theta=xy_theta
    return TrackedObject(x,y)

class ObjIdGetter:
    def __init__(self):
        self.current=0
    def get_next(self):
        result = self.current
        self.current+=1
        return result

static_obj_ids = ObjIdGetter()
get_next_obj_id = static_obj_ids.get_next

class TrackedObject:
    def __init__(self,x,y):
        self.obj_id = None
        dt = 1.0/FPS

        # process model
        A = np.array([[1, 0, dt, 0],
                      [0, 1, 0, dt],
                      [0, 0, 1,  0],
                      [0, 0, 0,  1]],
                     dtype=np.float64)
        # observation model
        C = np.array([[1, 0, 0, 0],
                      [0, 1, 0, 0]],
                     dtype=np.float64)
        # process covariance
        Q = Qsigma*np.eye(4)
        # measurement covariance
        R = Rsigma*np.eye(2)

        x0 = np.array([x,y,0,0],dtype=np.float)

        self.kf = adskalman.KalmanFilter(A,C,Q,R,x0,Q)
        self.isinitial = True
        self.is_living = True
        #print self.obj_id,'------------------------ start'
        #print x0

    def step(self, xy_theta, framenumber, pub):
        # xy is Nx2 array of possible observations
        xhatminus, Pminus = \
                   self.kf.step1__calculate_a_priori(isinitial=self.isinitial)
        #print self.obj_id,'------------------------'
        #print 'isinitial',self.isinitial

        if len(xy_theta)>=1:
            # XXX should calculate mahalanobis distance...
            diff = xy_theta[:,:2]-xhatminus[:2]
            d2 = np.sum(diff**2,axis=1)
            idx = np.argmin(d2)
            this_d2 = d2[idx]

        if len(xy_theta)==0 or (this_d2 > max_dist_squared):
            #print 'no observation'
            # best point is not good enough
            observation = None
            unused = xy_theta
            theta_passthrough = np.nan

        else:
            # remove used observation from list of points
            observation = xy_theta[idx,:2]
            N = len(xy_theta)
            unused = xy_theta[ np.arange(N)!=idx ]
            theta_passthrough = xy_theta[idx,2]

        xhat,P = \
               self.kf.step2__calculate_a_posteri(xhatminus, Pminus,
                                                  y=observation,
                                                  full_output=False)

        p2 = P[0,0] + P[1,1] # poor man's trace
        #print 'p2',p2
        if p2 > MAX_P2:
            self.kill()

        if not self.isinitial:
            # don't bother publishing first point

            if self.obj_id is None:
                self.obj_id = get_next_obj_id()

            msg = TrackedObj()
            msg.obj_id = self.obj_id
            msg.header.stamp = rospy.Time.now()
            msg.header.frame_id = "pixels"
            msg.framenumber = framenumber
            msg.state_vec = map(float,xhat) # convert from numpy
            msg.theta_passthrough = theta_passthrough
            msg.covariance_diagonal = map(float, np.diag(P) )
            msg.is_living = self.is_living
            pub.publish(msg)
        else:
            self.isinitial = False

        return unused

    def keep(self):
        return self.is_living

    def kill(self):
        self.is_living=False

class Tracker:
    def __init__(self):
        rospy.init_node('flymad_tracker')
        _ = rospy.Subscriber('/flymad/raw_2d_positions',
                             Raw2dPositions,
                             self.on_data)
        self.last_framenumber = None
        self.objs = []
        self.pub = rospy.Publisher( '/flymad/tracked', TrackedObj,
                                    tcp_nodelay=True)
        _ = rospy.Subscriber('/flymad/kill_all',
                             UInt8,
                             self.kill_all)


    def kill_all(self,msg):
        if msg.data:
            for obj in self.objs:
                obj.kill()

    def on_data(self, msg):
        stamp = msg.header.stamp
        framenumber = msg.framenumber
        if self.last_framenumber is not None:
            dframes = framenumber - self.last_framenumber
        else:
            dframes = 1

        if dframes < 0:
            self.last_framenumber = None
            dframes = 1
            rospy.logwarn('framenumber went backwards. resetting tracking')
            for obj in self.objs:
                obj.kill()

        self.last_framenumber = framenumber
        # generate 2D array of all 2D candidates
        xy_theta = np.array([(p.x,p.y,p.theta) for p in msg.points])

        if dframes > 1:
            rospy.logwarn('missing data')

        for obj in self.objs:
            # iff object takes 2D candidate, remove from xy array.
            xy_theta = obj.step( xy_theta, framenumber, self.pub )

        # perform births
        while len(xy_theta):
            self.objs.append( make_new_object( xy_theta[0] ))
            xy_theta = xy_theta[1:]

        # perform deaths
        self.objs = [o for o in self.objs if o.keep() ]

    def run(self):
        rospy.spin()

if __name__=='__main__':
    t=Tracker()
    t.run()
