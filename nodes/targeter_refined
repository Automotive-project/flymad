#!/usr/bin/env python
import numpy as np
import threading
import time

import roslib; roslib.load_manifest('flymad')
import rospy

from flymad.msg import TrackedObj
from geometry_msgs.msg import Vector3
from std_msgs.msg import UInt8, Int64, String
from flymad.msg import MicroPosition, TargetedObj, HeadDetect

from flymad.laser_camera_calibration import load_calibration
from flymad.util import myint32, myint16
from flymad.refined_utils import ControlManager, target_dx_dy_from_message

LASER_POWER_ON  = 255
LASER_POWER_OFF = 0

#MAKE THIS FALSE TO DISABLE TTL
ENABLE_TTL = True

(MODE_IDLE,
 MODE_WIDE,
 MODE_ZOOM) = range(3)

class Targeter:
    def __init__(self, cal_fname):
        self.cal = load_calibration(cal_fname)
        rospy.init_node('flymad_targeter')
        self.cur_obj_id = 0
        self.dacs       = 0,0
        self.last_vals  = 0,0,LASER_POWER_OFF #a,b,laser

        self._track_lock = threading.Lock()
        self._track_mode = 'W' #W or F (wide or fine)
        self._track_wait = 0
        self._track_zoom_misses = 0

        self._cur_x = 0
        self._cur_y = 0
        self._cur_vx = 0
        self._cur_vy = 0

        self._control = ControlManager()

        self._disable_laser_when_lose_targeting = rospy.get_param(
                    '~disable_laser_when_lose_targeting', False)

        self._laser_power = LASER_POWER_OFF

        self.pub_dac_position = rospy.Publisher('/flymad_micro/position',
                                                MicroPosition,
                                                tcp_nodelay=True)
        self.pub_targeted = rospy.Publisher('/targeter/targeted',
                                            TargetedObj,
                                            tcp_nodelay=True)
        buf = open(cal_fname).read()
        cal_pub = rospy.Publisher('/targeter/calibration',
                                  String,
                                  latch=True)
        cal_pub.publish(String(buf))

        self.stop_tracking(None)

        _ = rospy.Subscriber('/flymad/tracked',
                             TrackedObj,
                             self.on_tracking)
        _ = rospy.Subscriber('/flymad/target_object',
                             Int64,
                             self.on_target_object)
        _ = rospy.Subscriber('/flymad_micro/position_echo',
                             MicroPosition,
                             self.on_dac)
        _ = rospy.Subscriber('/flymad/laser_head_delta',
                             HeadDetect,
                             self.on_head_delta)

        _ = rospy.Subscriber('/experiment/laser',
                            UInt8,
                            self.on_laser)

    def on_laser(self, msg):
        self._laser_power = LASER_POWER_ON if msg.data else LASER_POWER_OFF

    def on_dac(self,msg):
        self.dacs = msg.posA, msg.posB

    def on_head_delta(self,msg):

        dx,dy = target_dx_dy_from_message(msg)

        with self._track_lock:
            if self._track_mode != 'F':
                return

            miss = dx is None

            if miss:
                print "miss"
                self._track_zoom_misses += 1

            if self._track_zoom_misses > 10:
                print "give up"
                self._track_mode = 'W'
                self._track_wait = 0
                self._track_zoom_misses = 0
                return

        if not miss:
            self._track_zoom_misses = 0

            a,b,_ = self.last_vals

            cmdA,cmdB = self._control.compute_dac_cmd(
                                        a, b, dx, dy,
                                        v=np.sqrt((self._cur_vx)**2 + (self._cur_vy)**2))

            print "%+.1f,%+.1f -> %+.1f,%+.1f (%+.1f,%+.1f)" % (a,b,cmdA,cmdB,dx,dy)


            if 1:
                # check if we are in the bounds of reason
                # target position from widefield camera
                cmd = (cmdA,cmdB)
                dac_pixel_x = self.cal.d2px(cmd)
                dac_pixel_y = self.cal.d2py(cmd)
                pixel_distance = np.sqrt(  (self._cur_x-dac_pixel_x)**2 + (self._cur_y-dac_pixel_y)**2 )
                if pixel_distance > 50:
                    with self._track_lock:
                        print "                                   give up due to pixel distance"
                        self._track_mode = 'W'
                        self._track_wait = 0
                        self._track_zoom_misses = 0
                        return

            self.send_dac(cmdA, cmdB, self._laser_power)
            self.send_targeted(MODE_ZOOM)

    def stop_tracking(self,old_obj_id):
        rospy.loginfo('stopped targeting object %s'%old_obj_id)
        self.cur_obj_id = None
        if self._disable_laser_when_lose_targeting:
            #arguably this should be on for safety, although
            #we are moving to model where experiment times are
            #controlled from another node using the
            #/experiment/laser message
            self.turnoff_laser()

    def start_tracking(self,obj_id):
        with self._track_lock:
            self._track_mode = 'W' #W or F (wide or fine)
            self._track_wait = 0
            self._track_zoom_misses = 0
            self.cur_obj_id = obj_id
            rospy.loginfo('now targeting object %d'%self.cur_obj_id)

    def on_target_object(self, msg):
        obj_id = msg.data
        if obj_id < 0:
            self.stop_tracking(self.cur_obj_id)
        else:
            self.start_tracking(obj_id)

    def on_tracking(self, msg):
        if (self.cur_obj_id is None) and msg.is_living:
            self.start_tracking(msg.obj_id)

        if self.cur_obj_id != msg.obj_id:
            return

        if not msg.is_living:
            self.stop_tracking(self.cur_obj_id)
            return

        # calculate fly position in pixel coordinates
        s = msg.state_vec
        self._cur_x, self._cur_y, self._cur_vx, self._cur_vy = self._control.predict_position(s)

        with self._track_lock:
            if self._track_mode != 'W':
                return

            if ENABLE_TTL:
                if self._track_wait < 5:
                    print "wait"
                    self._track_wait += 1
                else:
                    self._track_mode = 'F'
                    return

        x = int(max(0,self._cur_x))
        y = int(max(0,self._cur_y))

        # desired
        try:
            daca = self.cal.p2da[y,x]
            dacb = self.cal.p2db[y,x]
        except IndexError:
            return

        self.send_dac(daca, dacb, self._laser_power)
        self.send_targeted(MODE_WIDE)

    def turnoff_laser(self):
        a,b,_ = self.last_vals
        msg = MicroPosition(a, b, LASER_POWER_OFF)
        this_vals = msg.posA, msg.posB, msg.laser
        self.pub_dac_position.publish(msg)
        self.last_vals = this_vals

    def send_targeted(self, mode):
        obj_id = self.cur_obj_id
        aa, ab = self.dacs
        dac_pixel_x = self.cal.d2px((aa,ab))
        dac_pixel_y = self.cal.d2py((aa,ab))

        msg = TargetedObj()
        msg.header.stamp = rospy.Time.now()
        msg.obj_id = int(obj_id) if obj_id is not None else 0
        msg.fly_x = float(self._cur_x)
        msg.fly_y = float(self._cur_y)
        msg.laser_x = float(dac_pixel_x)
        msg.laser_y = float(dac_pixel_y)
        msg.laser_power = int(self._laser_power)
        msg.mode = int(mode)
        self.pub_targeted.publish(msg)

    def send_dac(self, daca, dacb, laser_power):

        # position mode
        msg = MicroPosition(myint16(daca), myint16(dacb), laser_power)
        this_vals = msg.posA, msg.posB, msg.laser
        if this_vals != self.last_vals:
            self.pub_dac_position.publish(msg)
            self.last_vals = this_vals

    def run(self):
        self._laser_power = LASER_POWER_ON
        rospy.spin()
        self.send_dac(0, 0, LASER_POWER_OFF)


if __name__=='__main__':
    cal_fname = rospy.myargv()[1]
    args = rospy.myargv()[2:]
    t=Targeter(cal_fname, *args)
    t.run()
