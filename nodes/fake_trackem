#!/usr/bin/env python
import roslib; roslib.load_manifest('flymad')
import rospy

from flymad.msg import Raw2dPositions
from geometry_msgs.msg import Pose2D

import numpy as np
import math

WIDTH=1024
HEIGHT=768

class FakeObject:
    def __init__(self):
        self.x = float(np.random.uniform(size=(1,))*WIDTH)
        self.y = float(np.random.uniform(size=(1,))*HEIGHT)
        self.theta = float(np.random.uniform(size=(1,))*2*np.pi)
        self.speed = float(np.random.uniform(size=(1,))*50)
    def update(self):
        xvel = math.cos(self.theta)*self.speed
        yvel = math.sin(self.theta)*self.speed
        self.x += xvel
        self.y += yvel
        self.theta += float(np.random.normal(size=(1,)))
    def in_bounds(self):
        if self.x < 0 or self.y < 0:
            return False
        if self.x > WIDTH or self.y > HEIGHT:
            return False
        return True
    def get_pose_2d(self):
        result = Pose2D()
        result.x = self.x
        result.y = self.y
        result.theta = self.theta
        return result

def make_obj():
    return FakeObject()

class FakeTrackem:
    def __init__(self):
        self.width = WIDTH
        self.height = HEIGHT
        self.n_objs = 3
        self.current_objects = []

        rospy.init_node('fake_trackem')
        self.pub = rospy.Publisher( '/flymad/raw_2d_positions', Raw2dPositions )

    def run(self):
        r = rospy.Rate(30) # 30hz
        framenumber = 0
        while not rospy.is_shutdown():
            framenumber += 1

            # make sure we have self.n_objs
            while len(self.current_objects) < self.n_objs:
                self.current_objects.append( make_obj() )

            for obj in self.current_objects:
                obj.update()

            # get rid of bad objects
            self.current_objects = [o for o in self.current_objects \
                                    if o.in_bounds()]

            msg = Raw2dPositions()

            msg.header.stamp = rospy.Time.now()
            msg.header.frame_id = "pixels"

            msg.framenumber = framenumber

            for obj in self.current_objects:
                msg.points.append( obj.get_pose_2d() )

            self.pub.publish(msg)

            r.sleep()

if __name__=='__main__':
    t=FakeTrackem()
    t.run()
