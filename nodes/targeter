#!/usr/bin/env python
import numpy as np

import roslib; roslib.load_manifest('flymad')
import rospy

from std_msgs.msg import UInt8, Int64, String
from flymad.msg import MicroVelocity, MicroPosition, TargetedObj, TrackedObj
from flymad.srv import LaserState, LaserStateResponse

from flymad.refined_utils import predict_position
from flymad.laser_camera_calibration import load_calibration
from flymad.util import myint32
from flymad.constants import LASERS_ALL_ON, LASERS_ALL_OFF

LATENCY = 0.05
K_PROPORTIONAL = 1e3/30.0

class Targeter:
    def __init__(self,cal_fname):
        self.cal = load_calibration(cal_fname)
        rospy.init_node('flymad_targeter')
        self.pub_dac_velocity = rospy.Publisher('/flymad_micro/velocity',
                                                MicroVelocity,
                                                tcp_nodelay=True)

        buf = open(cal_fname).read()
        cal_pub = rospy.Publisher('/targeter/calibration',
                                  String,
                                  latch=True)
        cal_pub.publish(String(buf))

        self.cur_obj_id = None
        self.dacs = 0,0
        self.last_vals = None

        self._laser = LASERS_ALL_ON

        self.stop_tracking(None)

        self.pub_dac_position = rospy.Publisher('/flymad_micro/position',
                                                MicroPosition,
                                                tcp_nodelay=True)
        self.pub_dac_velocity = rospy.Publisher('/flymad_micro/velocity',
                                                MicroVelocity,
                                                tcp_nodelay=True)

        self.pub_targeted = rospy.Publisher('/targeter/targeted',
                                            TargetedObj,
                                            tcp_nodelay=True)


        _ = rospy.Subscriber('/flymad/tracked',
                             TrackedObj,
                             self.on_tracking)
        _ = rospy.Subscriber('/flymad/target_object',
                             Int64,
                             self.on_target_object)
        _ = rospy.Subscriber('/flymad_micro/position_echo',
                             MicroPosition,
                             self.on_dac)

        _ = rospy.Subscriber('/experiment/laser',
                            UInt8,
                            self.on_laser)
        _ = rospy.Service('/experiment/laser', LaserState, self.on_laser_srv)

    def on_laser(self, msg):
        self._laser = msg.data
    def on_laser_srv(self, req):
        self._laser = req.data
        return LaserStateResponse()

    def on_dac(self,msg):
        self.dacs = msg.posA, msg.posB

    def _get_current_dacs(self):
        return self.dacs

    def stop_tracking(self,old_obj_id):
        rospy.loginfo('stopped targeting object %s'%old_obj_id)
        self.cur_obj_id = None
        msg = MicroVelocity()
        msg.velA = myint32(0)
        msg.velB = myint32(0)
        this_vels = msg.velA, msg.velB
        if this_vels != self.last_vals:
            self.pub_dac_velocity.publish(msg)
            self.last_vals = this_vels

    def on_target_object(self, msg):
        obj_id = msg.data
        if obj_id < 0:
            self.stop_tracking(self.cur_obj_id)
        else:
            self.cur_obj_id = obj_id
            rospy.loginfo('now targeting object %d'%self.cur_obj_id)

    def on_tracking(self, msg):
        if self.cur_obj_id is None:
            self.cur_obj_id = msg.obj_id
            rospy.loginfo('now targeting object %d'%self.cur_obj_id)

        if self.cur_obj_id != msg.obj_id:
            return

        if not msg.is_living:
            self.stop_tracking(self.cur_obj_id)
            return

        # calculate fly position in pixel coordinates
        s = msg.state_vec
        x, y, vx, vy = predict_position(s, LATENCY)
        x = int(max(0,x))
        y = int(max(0,y))

        stamp = msg.header.stamp

        # desired
        try:
            daca = self.cal.p2da[y,x]
            dacb = self.cal.p2db[y,x]
        except IndexError:
            return

        if np.isnan(daca) or np.isnan(dacb):
            return

        if 0:
            # velocity mode
            aa, ab = self._get_current_dacs()

            diffa = daca-aa
            diffb = dacb-ab

            vela = diffa*K_PROPORTIONAL
            velb = diffb*K_PROPORTIONAL

            msg = MicroVelocity()
            msg.velA = myint32(vela)
            msg.velB = myint32(velb)
            msg.laser = self._laser

            this_vels = msg.velA, msg.velB
            if this_vels != self.last_vals:
                self.pub_dac_velocity.publish(msg)
                self.last_vals = this_vels
        else:
            # position mode
            a = int(np.round(daca))
            b = int(np.round(dacb))
            msg = MicroPosition()
            msg.posA = a
            msg.posB = b
            msg.laser = self._laser

            assert msg.posA==a
            assert msg.posB==b
            this_vals = msg.posA, msg.posB
            if this_vals != self.last_vals:
                self.pub_dac_position.publish(msg)
                self.last_vals = this_vals

        self.send_targeted(self.cur_obj_id, x, y, stamp)

    def send_targeted(self, obj_id, x, y, stamp, mode=1):
        obj_id = self.cur_obj_id
        aa, ab = self.dacs
        dac_pixel_x = self.cal.d2px((aa,ab))
        dac_pixel_y = self.cal.d2py((aa,ab))

        msg = TargetedObj()
        msg.header.stamp = stamp
        msg.obj_id = int(obj_id) if obj_id is not None else 0
        msg.fly_x = float(x)
        msg.fly_y = float(y)
        msg.laser_x = float(dac_pixel_x)
        msg.laser_y = float(dac_pixel_y)
        msg.laser_power = int(self._laser)
        msg.mode = int(mode)
        self.pub_targeted.publish(msg)

    def run(self):
        self._laser = LASERS_ALL_ON
        rospy.spin()

if __name__=='__main__':
    cal_fname = rospy.myargv()[1]
    t=Targeter(cal_fname)
    t.run()
